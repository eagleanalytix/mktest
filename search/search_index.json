{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Material Site","text":"<p>A comprehensive documentation site to help you get started and master our platform.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Getting Started</p> <p>Learn the basics and get up and running quickly with our installation guide and quick start tutorial.</p> <p> Installation</p> </li> <li> <p> User Guide</p> <p>Comprehensive guide covering all features and functionality in detail.</p> <p> User Guide</p> </li> <li> <p> Quick Start</p> <p>Step-by-step quick start guide to get you productive in minutes.</p> <p> Quick Start</p> </li> <li> <p> Advanced Topics</p> <p>Deep dive into advanced features and best practices for power users.</p> <p> Advanced Guide</p> </li> <li> <p> Tutorials</p> <p>Hands-on tutorials and practical examples to learn by doing.</p> <p> Tutorial 1</p> </li> <li> <p> API Reference</p> <p>Complete API documentation and reference materials.</p> <p> API Docs</p> </li> </ul>"},{"location":"#interactive-notebooks","title":"Interactive Notebooks","text":"<p>Explore our Jupyter notebooks for interactive examples and analysis:</p> <ul> <li>Data Analysis Notebook</li> <li>Visualization Examples</li> <li>Code Examples</li> </ul>"},{"location":"#features","title":"Features","text":"<p>What You'll Find Here</p> <ul> <li>\ud83d\udcda Comprehensive documentation</li> <li>\ud83d\ude80 Quick start guides</li> <li>\ud83d\udca1 Best practices and tips</li> <li>\ud83d\udd27 API reference</li> <li>\ud83d\udcca Interactive notebooks</li> <li>\ud83c\udfaf Real-world examples</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need assistance:</p> <ol> <li>Check the User Guide</li> <li>Browse Tutorials</li> <li>Visit our GitHub Repository</li> </ol> <p>About This Documentation</p> <p>This documentation is built with MkDocs and the Material theme.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>Git</li> </ul>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>\\\\\bash git clone https://github.com/eagleanalytix/mktest.git cd mktest \\\\</p>"},{"location":"getting-started/installation/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"<p>\\\\\bash python -m venv venv \\\\</p>"},{"location":"getting-started/installation/#step-3-activate-virtual-environment","title":"Step 3: Activate Virtual Environment","text":"<p>Windows: \\\\powershell .\\venv\\Scripts\\Activate.ps1 \\\\</p> <p>Linux/Mac: \\\\\bash source venv/bin/activate \\\\</p>"},{"location":"getting-started/installation/#step-4-install-dependencies","title":"Step 4: Install Dependencies","text":"<p>\\\\\bash pip install -r requirements.txt \\\\</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Verify your installation by running:</p> <p>\\\\\bash python --version pip list \\\\</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues</p> <p>If you encounter permission errors, try running with administrator privileges or use --user\\ flag with pip.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have everything installed, proceed to the Quick Start Guide.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running in 5 minutes!</p>"},{"location":"getting-started/quick-start/#overview","title":"Overview","text":"<p>This quick start guide will help you:</p> <ol> <li>Set up your environment</li> <li>Run your first example</li> <li>Understand basic concepts</li> </ol>"},{"location":"getting-started/quick-start/#step-1-initialize","title":"Step 1: Initialize","text":"<p>\\\\python from myproject import initialize</p>"},{"location":"getting-started/quick-start/#initialize-the-system","title":"Initialize the system","text":"<p>app = initialize() \\\\</p>"},{"location":"getting-started/quick-start/#step-2-basic-usage","title":"Step 2: Basic Usage","text":"<p>\\\\python</p>"},{"location":"getting-started/quick-start/#your-first-example","title":"Your first example","text":"<p>result = app.process() print(result) \\\\</p>"},{"location":"getting-started/quick-start/#step-3-configuration","title":"Step 3: Configuration","text":"<p>Edit the configuration file:</p> <p>\\\\yaml settings:   debug: true   output: console \\\\</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>Explore the User Guide</li> <li>Try some Tutorials</li> <li>Check out the API Reference</li> </ul> <p>Congratulations!</p> <p>You've completed the quick start guide! \ud83c\udf89</p>"},{"location":"guides/advanced-topics/","title":"Advanced Topics","text":""},{"location":"guides/advanced-topics/#introduction","title":"Introduction","text":"<p>This guide covers advanced features and techniques for power users.</p>"},{"location":"guides/advanced-topics/#advanced-features","title":"Advanced Features","text":""},{"location":"guides/advanced-topics/#custom-extensions","title":"Custom Extensions","text":"<p>Create custom extensions:</p> <p>\\\\python from myproject.extensions import BaseExtension</p> <p>class MyExtension(BaseExtension):     def process(self, data):         # Custom logic here         return processed_data \\\\</p>"},{"location":"guides/advanced-topics/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guides/advanced-topics/#caching-strategies","title":"Caching Strategies","text":"<p>Implement efficient caching:</p> <p>\\\\python from functools import lru_cache</p> <p>@lru_cache(maxsize=128) def expensive_operation(param):     # Expensive computation     return result \\\\</p>"},{"location":"guides/advanced-topics/#parallel-processing","title":"Parallel Processing","text":"<p>Leverage multiprocessing:</p> <p>\\\\python from multiprocessing import Pool</p> <p>def process_item(item):     return item * 2</p> <p>with Pool(4) as p:     results = p.map(process_item, items) \\\\</p>"},{"location":"guides/advanced-topics/#integration-patterns","title":"Integration Patterns","text":""},{"location":"guides/advanced-topics/#api-integration","title":"API Integration","text":"<p>\\\\python import requests</p> <p>def call_external_api(endpoint):     response = requests.get(f\"https://api.example.com/{endpoint}\")     return response.json() \\\\</p>"},{"location":"guides/advanced-topics/#database-integration","title":"Database Integration","text":"<p>\\\\python from sqlalchemy import create_engine</p> <p>engine = create_engine('postgresql://user:pass@localhost/db') \\\\</p>"},{"location":"guides/advanced-topics/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"guides/advanced-topics/#microservices","title":"Microservices","text":"<p>Design microservices architecture:</p> <p>\\\\mermaid graph TB     A[API Gateway] --&gt; B[Service 1]     A --&gt; C[Service 2]     A --&gt; D[Service 3]     B --&gt; E[Database 1]     C --&gt; F[Database 2] \\\\</p>"},{"location":"guides/advanced-topics/#event-driven-design","title":"Event-Driven Design","text":"<p>Implement event-driven patterns:</p> <p>\\\\python from myproject.events import EventBus</p> <p>bus = EventBus()</p> <p>@bus.on('data.processed') def handle_processed_data(data):     print(f\"Data processed: {data}\") \\\\</p>"},{"location":"guides/advanced-topics/#security-best-practices","title":"Security Best Practices","text":"<p>Critical Security Considerations</p> <ul> <li>Always use HTTPS for external communications</li> <li>Implement proper authentication and authorization</li> <li>Regular security audits and updates</li> </ul>"},{"location":"guides/advanced-topics/#authentication","title":"Authentication","text":"<p>\\\\python from myproject.auth import authenticate</p> <p>token = authenticate(username, password) \\\\</p>"},{"location":"guides/advanced-topics/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"guides/advanced-topics/#logging","title":"Logging","text":"<p>\\\\python import logging</p> <p>logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)</p> <p>logger.info(\"Application started\") \\\\</p>"},{"location":"guides/advanced-topics/#profiling","title":"Profiling","text":"<p>\\\\python import cProfile</p> <p>cProfile.run('your_function()') \\\\</p>"},{"location":"guides/advanced-topics/#references","title":"References","text":"<ul> <li>User Guide</li> <li>API Documentation</li> </ul>"},{"location":"guides/user-guide/","title":"User Guide","text":""},{"location":"guides/user-guide/#introduction","title":"Introduction","text":"<p>Welcome to the comprehensive user guide. This documentation covers all features and functionality.</p>"},{"location":"guides/user-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Concepts</li> <li>Core Features</li> <li>Configuration</li> <li>Best Practices</li> </ol>"},{"location":"guides/user-guide/#basic-concepts","title":"Basic Concepts","text":""},{"location":"guides/user-guide/#overview","title":"Overview","text":"<p>Understand the fundamental concepts:</p> <ul> <li>Components: Modular building blocks</li> <li>Services: Background processes</li> <li>API: Programmatic interface</li> </ul>"},{"location":"guides/user-guide/#architecture","title":"Architecture","text":"<p>\\\\mermaid graph LR     A[User] --&gt; B[Interface]     B --&gt; C[Core Logic]     C --&gt; D[Database] \\\\</p>"},{"location":"guides/user-guide/#core-features","title":"Core Features","text":""},{"location":"guides/user-guide/#feature-1-data-processing","title":"Feature 1: Data Processing","text":"<p>Process data efficiently:</p> <p>\\\\python from myproject import DataProcessor</p> <p>processor = DataProcessor() result = processor.process(data) \\\\</p>"},{"location":"guides/user-guide/#feature-2-visualization","title":"Feature 2: Visualization","text":"<p>Create stunning visualizations:</p> <p>\\\\python from myproject import Visualizer</p> <p>viz = Visualizer() viz.plot(data) \\\\</p>"},{"location":"guides/user-guide/#configuration","title":"Configuration","text":""},{"location":"guides/user-guide/#configuration-file","title":"Configuration File","text":"<p>Example configuration:</p> <p>\\\\yaml app:   name: MyApp   version: 1.0.0   settings:     debug: false     log_level: INFO \\\\</p>"},{"location":"guides/user-guide/#best-practices","title":"Best Practices","text":"<p>Performance Tips</p> <ul> <li>Cache frequently accessed data</li> <li>Use batch processing for large datasets</li> <li>Monitor resource usage</li> </ul> <p>Security</p> <p>Always validate user input and sanitize data before processing.</p>"},{"location":"guides/user-guide/#advanced-usage","title":"Advanced Usage","text":"<p>For advanced topics, see the Advanced Guide.</p>"},{"location":"notebooks/analysis/","title":"Data Analysis Notebook","text":"In\u00a0[\u00a0]: Copied! <pre># Import required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nprint('Libraries imported successfully!')\n</pre> # Import required libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt  print('Libraries imported successfully!') In\u00a0[\u00a0]: Copied! <pre># Generate sample data\nnp.random.seed(42)\ndates = pd.date_range('2024-01-01', periods=100)\nvalues = np.random.randn(100).cumsum()\n\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\n\nprint(df.head())\n</pre> # Generate sample data np.random.seed(42) dates = pd.date_range('2024-01-01', periods=100) values = np.random.randn(100).cumsum()  df = pd.DataFrame({     'date': dates,     'value': values })  print(df.head()) In\u00a0[\u00a0]: Copied! <pre># Display statistical summary\nprint('Statistical Summary:')\nprint(df['value'].describe())\n</pre> # Display statistical summary print('Statistical Summary:') print(df['value'].describe()) In\u00a0[\u00a0]: Copied! <pre># Create visualization\nplt.figure(figsize=(12, 6))\nplt.plot(df['date'], df['value'], linewidth=2)\nplt.title('Time Series Data', fontsize=16)\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Value', fontsize=12)\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n</pre> # Create visualization plt.figure(figsize=(12, 6)) plt.plot(df['date'], df['value'], linewidth=2) plt.title('Time Series Data', fontsize=16) plt.xlabel('Date', fontsize=12) plt.ylabel('Value', fontsize=12) plt.grid(True, alpha=0.3) plt.tight_layout() plt.show()"},{"location":"notebooks/analysis/#data-analysis-notebook","title":"Data Analysis Notebook\u00b6","text":"<p>This notebook demonstrates basic data analysis techniques.</p>"},{"location":"notebooks/analysis/#overview","title":"Overview\u00b6","text":"<p>We'll cover:</p> <ul> <li>Loading data</li> <li>Exploratory analysis</li> <li>Statistical summaries</li> <li>Basic visualizations</li> </ul>"},{"location":"notebooks/analysis/#generate-sample-data","title":"Generate Sample Data\u00b6","text":"<p>Let's create some sample data for analysis.</p>"},{"location":"notebooks/analysis/#statistical-summary","title":"Statistical Summary\u00b6","text":""},{"location":"notebooks/analysis/#data-visualization","title":"Data Visualization\u00b6","text":""},{"location":"notebooks/analysis/#exercises","title":"Exercises\u00b6","text":"<ol> <li>Calculate the moving average</li> <li>Identify outliers</li> <li>Create additional visualizations</li> </ol>"},{"location":"notebooks/analysis/#next-steps","title":"Next Steps\u00b6","text":"<ul> <li>Explore Visualization Notebook</li> <li>Check out Code Examples</li> </ul>"},{"location":"notebooks/examples/","title":"Code Examples","text":"In\u00a0[\u00a0]: Copied! <pre>class DataPipeline:\n    '''A simple data processing pipeline.'''\n    \n    def __init__(self):\n        self.steps = []\n    \n    def add_step(self, func):\n        '''Add a processing step.'''\n        self.steps.append(func)\n        return self\n    \n    def process(self, data):\n        '''Process data through all steps.'''\n        result = data\n        for step in self.steps:\n            result = step(result)\n        return result\n\n# Usage example\npipeline = DataPipeline()\npipeline.add_step(lambda x: [i * 2 for i in x])\npipeline.add_step(lambda x: [i + 10 for i in x])\n\nresult = pipeline.process([1, 2, 3, 4, 5])\nprint('Pipeline result:', result)\n</pre> class DataPipeline:     '''A simple data processing pipeline.'''          def __init__(self):         self.steps = []          def add_step(self, func):         '''Add a processing step.'''         self.steps.append(func)         return self          def process(self, data):         '''Process data through all steps.'''         result = data         for step in self.steps:             result = step(result)         return result  # Usage example pipeline = DataPipeline() pipeline.add_step(lambda x: [i * 2 for i in x]) pipeline.add_step(lambda x: [i + 10 for i in x])  result = pipeline.process([1, 2, 3, 4, 5]) print('Pipeline result:', result) In\u00a0[\u00a0]: Copied! <pre>import json\n\nclass ConfigManager:\n    '''Manage application configuration.'''\n    \n    def __init__(self, defaults=None):\n        self.config = defaults or {}\n    \n    def get(self, key, default=None):\n        '''Get configuration value.'''\n        return self.config.get(key, default)\n    \n    def set(self, key, value):\n        '''Set configuration value.'''\n        self.config[key] = value\n    \n    def load_from_dict(self, config_dict):\n        '''Load configuration from dictionary.'''\n        self.config.update(config_dict)\n    \n    def to_dict(self):\n        '''Export configuration as dictionary.'''\n        return self.config.copy()\n\n# Usage example\nconfig = ConfigManager({'debug': False})\nconfig.set('log_level', 'INFO')\nprint('Configuration:', config.to_dict())\n</pre> import json  class ConfigManager:     '''Manage application configuration.'''          def __init__(self, defaults=None):         self.config = defaults or {}          def get(self, key, default=None):         '''Get configuration value.'''         return self.config.get(key, default)          def set(self, key, value):         '''Set configuration value.'''         self.config[key] = value          def load_from_dict(self, config_dict):         '''Load configuration from dictionary.'''         self.config.update(config_dict)          def to_dict(self):         '''Export configuration as dictionary.'''         return self.config.copy()  # Usage example config = ConfigManager({'debug': False}) config.set('log_level', 'INFO') print('Configuration:', config.to_dict()) In\u00a0[\u00a0]: Copied! <pre>from functools import wraps\nfrom time import time\n\nclass SimpleCache:\n    '''Simple in-memory cache with TTL.'''\n    \n    def __init__(self, ttl=60):\n        self.cache = {}\n        self.ttl = ttl\n    \n    def get(self, key):\n        '''Get value from cache.'''\n        if key in self.cache:\n            value, timestamp = self.cache[key]\n            if time() - timestamp &lt; self.ttl:\n                return value\n            else:\n                del self.cache[key]\n        return None\n    \n    def set(self, key, value):\n        '''Set value in cache.'''\n        self.cache[key] = (value, time())\n    \n    def decorator(self, func):\n        '''Cache decorator.'''\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = f\"{func.__name__}_{args}_{kwargs}\"\n            result = self.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                self.set(key, result)\n            return result\n        return wrapper\n\n# Usage example\ncache = SimpleCache(ttl=300)\n\n@cache.decorator\ndef expensive_function(x):\n    print('Computing...')\n    return x ** 2\n\nprint(expensive_function(5))  # Computes\nprint(expensive_function(5))  # Returns from cache\n</pre> from functools import wraps from time import time  class SimpleCache:     '''Simple in-memory cache with TTL.'''          def __init__(self, ttl=60):         self.cache = {}         self.ttl = ttl          def get(self, key):         '''Get value from cache.'''         if key in self.cache:             value, timestamp = self.cache[key]             if time() - timestamp &lt; self.ttl:                 return value             else:                 del self.cache[key]         return None          def set(self, key, value):         '''Set value in cache.'''         self.cache[key] = (value, time())          def decorator(self, func):         '''Cache decorator.'''         @wraps(func)         def wrapper(*args, **kwargs):             key = f\"{func.__name__}_{args}_{kwargs}\"             result = self.get(key)             if result is None:                 result = func(*args, **kwargs)                 self.set(key, result)             return result         return wrapper  # Usage example cache = SimpleCache(ttl=300)  @cache.decorator def expensive_function(x):     print('Computing...')     return x ** 2  print(expensive_function(5))  # Computes print(expensive_function(5))  # Returns from cache In\u00a0[\u00a0]: Copied! <pre>class EventSystem:\n    '''Simple event system for pub/sub pattern.'''\n    \n    def __init__(self):\n        self.listeners = {}\n    \n    def on(self, event_name, callback):\n        '''Register event listener.'''\n        if event_name not in self.listeners:\n            self.listeners[event_name] = []\n        self.listeners[event_name].append(callback)\n    \n    def emit(self, event_name, *args, **kwargs):\n        '''Emit event to all listeners.'''\n        if event_name in self.listeners:\n            for callback in self.listeners[event_name]:\n                callback(*args, **kwargs)\n    \n    def off(self, event_name, callback=None):\n        '''Remove event listener(s).'''\n        if callback is None:\n            self.listeners.pop(event_name, None)\n        elif event_name in self.listeners:\n            self.listeners[event_name].remove(callback)\n\n# Usage example\nevents = EventSystem()\n\ndef on_data_received(data):\n    print(f'Data received: {data}')\n\nevents.on('data', on_data_received)\nevents.emit('data', {'value': 42})\n</pre> class EventSystem:     '''Simple event system for pub/sub pattern.'''          def __init__(self):         self.listeners = {}          def on(self, event_name, callback):         '''Register event listener.'''         if event_name not in self.listeners:             self.listeners[event_name] = []         self.listeners[event_name].append(callback)          def emit(self, event_name, *args, **kwargs):         '''Emit event to all listeners.'''         if event_name in self.listeners:             for callback in self.listeners[event_name]:                 callback(*args, **kwargs)          def off(self, event_name, callback=None):         '''Remove event listener(s).'''         if callback is None:             self.listeners.pop(event_name, None)         elif event_name in self.listeners:             self.listeners[event_name].remove(callback)  # Usage example events = EventSystem()  def on_data_received(data):     print(f'Data received: {data}')  events.on('data', on_data_received) events.emit('data', {'value': 42}) In\u00a0[\u00a0]: Copied! <pre>import time\nfrom functools import wraps\n\ndef retry(max_attempts=3, delay=1, backoff=2):\n    '''Retry decorator with exponential backoff.'''\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            attempts = 0\n            current_delay = delay\n            \n            while attempts &lt; max_attempts:\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    attempts += 1\n                    if attempts == max_attempts:\n                        raise\n                    print(f'Attempt {attempts} failed: {e}')\n                    print(f'Retrying in {current_delay} seconds...')\n                    time.sleep(current_delay)\n                    current_delay *= backoff\n        \n        return wrapper\n    return decorator\n\n# Usage example\n@retry(max_attempts=3, delay=1)\ndef unstable_operation():\n    import random\n    if random.random() &lt; 0.7:\n        raise Exception('Random failure')\n    return 'Success!'\n\n# This will retry on failure\n# result = unstable_operation()\nprint('Retry decorator defined successfully!')\n</pre> import time from functools import wraps  def retry(max_attempts=3, delay=1, backoff=2):     '''Retry decorator with exponential backoff.'''     def decorator(func):         @wraps(func)         def wrapper(*args, **kwargs):             attempts = 0             current_delay = delay                          while attempts &lt; max_attempts:                 try:                     return func(*args, **kwargs)                 except Exception as e:                     attempts += 1                     if attempts == max_attempts:                         raise                     print(f'Attempt {attempts} failed: {e}')                     print(f'Retrying in {current_delay} seconds...')                     time.sleep(current_delay)                     current_delay *= backoff                  return wrapper     return decorator  # Usage example @retry(max_attempts=3, delay=1) def unstable_operation():     import random     if random.random() &lt; 0.7:         raise Exception('Random failure')     return 'Success!'  # This will retry on failure # result = unstable_operation() print('Retry decorator defined successfully!')"},{"location":"notebooks/examples/#code-examples","title":"Code Examples\u00b6","text":"<p>Practical code examples and patterns.</p>"},{"location":"notebooks/examples/#contents","title":"Contents\u00b6","text":"<ol> <li>Data structures</li> <li>Algorithms</li> <li>Design patterns</li> <li>Best practices</li> </ol>"},{"location":"notebooks/examples/#example-1-data-processing-pipeline","title":"Example 1: Data Processing Pipeline\u00b6","text":""},{"location":"notebooks/examples/#example-2-configuration-manager","title":"Example 2: Configuration Manager\u00b6","text":""},{"location":"notebooks/examples/#example-3-simple-cache-implementation","title":"Example 3: Simple Cache Implementation\u00b6","text":""},{"location":"notebooks/examples/#example-4-event-system","title":"Example 4: Event System\u00b6","text":""},{"location":"notebooks/examples/#example-5-retry-decorator","title":"Example 5: Retry Decorator\u00b6","text":""},{"location":"notebooks/examples/#best-practices-summary","title":"Best Practices Summary\u00b6","text":"<ol> <li>Use type hints for better code clarity</li> <li>Implement proper error handling with try/except blocks</li> <li>Write docstrings for all functions and classes</li> <li>Follow PEP 8 style guidelines</li> <li>Use context managers for resource management</li> <li>Implement logging instead of print statements</li> <li>Write unit tests for all critical code</li> </ol>"},{"location":"notebooks/examples/#next-steps","title":"Next Steps\u00b6","text":"<ul> <li>Review the API Reference</li> <li>Explore Advanced Topics</li> <li>Practice with the exercises in each section</li> </ul>"},{"location":"notebooks/visualization/","title":"Visualization Examples","text":"In\u00a0[\u00a0]: Copied! <pre># Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set style\nsns.set_style('whitegrid')\nplt.rcParams['figure.figsize'] = (12, 8)\n\nprint('Setup complete!')\n</pre> # Import libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns  # Set style sns.set_style('whitegrid') plt.rcParams['figure.figsize'] = (12, 8)  print('Setup complete!') In\u00a0[\u00a0]: Copied! <pre># Create sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create plot\nplt.figure(figsize=(12, 6))\nplt.plot(x, y1, label='sin(x)', linewidth=2)\nplt.plot(x, y2, label='cos(x)', linewidth=2)\nplt.title('Trigonometric Functions', fontsize=16)\nplt.xlabel('X', fontsize=12)\nplt.ylabel('Y', fontsize=12)\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.show()\n</pre> # Create sample data x = np.linspace(0, 10, 100) y1 = np.sin(x) y2 = np.cos(x)  # Create plot plt.figure(figsize=(12, 6)) plt.plot(x, y1, label='sin(x)', linewidth=2) plt.plot(x, y2, label='cos(x)', linewidth=2) plt.title('Trigonometric Functions', fontsize=16) plt.xlabel('X', fontsize=12) plt.ylabel('Y', fontsize=12) plt.legend() plt.grid(True, alpha=0.3) plt.show() In\u00a0[\u00a0]: Copied! <pre># Create sample data\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [23, 45, 56, 78, 32]\n\n# Create bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(categories, values, color='skyblue', edgecolor='navy')\nplt.title('Category Comparison', fontsize=16)\nplt.xlabel('Category', fontsize=12)\nplt.ylabel('Value', fontsize=12)\nplt.grid(axis='y', alpha=0.3)\nplt.show()\n</pre> # Create sample data categories = ['A', 'B', 'C', 'D', 'E'] values = [23, 45, 56, 78, 32]  # Create bar chart plt.figure(figsize=(10, 6)) plt.bar(categories, values, color='skyblue', edgecolor='navy') plt.title('Category Comparison', fontsize=16) plt.xlabel('Category', fontsize=12) plt.ylabel('Value', fontsize=12) plt.grid(axis='y', alpha=0.3) plt.show() In\u00a0[\u00a0]: Copied! <pre># Generate random data\nnp.random.seed(42)\nx = np.random.randn(100)\ny = 2 * x + np.random.randn(100) * 0.5\n\n# Create scatter plot\nplt.figure(figsize=(10, 6))\nplt.scatter(x, y, alpha=0.6, s=50)\nplt.title('Scatter Plot with Correlation', fontsize=16)\nplt.xlabel('X Variable', fontsize=12)\nplt.ylabel('Y Variable', fontsize=12)\nplt.grid(True, alpha=0.3)\nplt.show()\n</pre> # Generate random data np.random.seed(42) x = np.random.randn(100) y = 2 * x + np.random.randn(100) * 0.5  # Create scatter plot plt.figure(figsize=(10, 6)) plt.scatter(x, y, alpha=0.6, s=50) plt.title('Scatter Plot with Correlation', fontsize=16) plt.xlabel('X Variable', fontsize=12) plt.ylabel('Y Variable', fontsize=12) plt.grid(True, alpha=0.3) plt.show() In\u00a0[\u00a0]: Copied! <pre># Generate normal distribution data\ndata = np.random.normal(0, 1, 1000)\n\n# Create histogram\nplt.figure(figsize=(10, 6))\nplt.hist(data, bins=30, edgecolor='black', alpha=0.7)\nplt.title('Normal Distribution Histogram', fontsize=16)\nplt.xlabel('Value', fontsize=12)\nplt.ylabel('Frequency', fontsize=12)\nplt.grid(axis='y', alpha=0.3)\nplt.show()\n</pre> # Generate normal distribution data data = np.random.normal(0, 1, 1000)  # Create histogram plt.figure(figsize=(10, 6)) plt.hist(data, bins=30, edgecolor='black', alpha=0.7) plt.title('Normal Distribution Histogram', fontsize=16) plt.xlabel('Value', fontsize=12) plt.ylabel('Frequency', fontsize=12) plt.grid(axis='y', alpha=0.3) plt.show() In\u00a0[\u00a0]: Copied! <pre># Generate correlation matrix\ndata = np.random.randn(10, 10)\ncorr = np.corrcoef(data)\n\n# Create heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm', center=0)\nplt.title('Correlation Heatmap', fontsize=16)\nplt.show()\n</pre> # Generate correlation matrix data = np.random.randn(10, 10) corr = np.corrcoef(data)  # Create heatmap plt.figure(figsize=(10, 8)) sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm', center=0) plt.title('Correlation Heatmap', fontsize=16) plt.show()"},{"location":"notebooks/visualization/#visualization-examples","title":"Visualization Examples\u00b6","text":"<p>This notebook demonstrates various visualization techniques.</p>"},{"location":"notebooks/visualization/#topics-covered","title":"Topics Covered\u00b6","text":"<ul> <li>Line plots</li> <li>Bar charts</li> <li>Scatter plots</li> <li>Histograms</li> <li>Heatmaps</li> </ul>"},{"location":"notebooks/visualization/#line-plot-example","title":"Line Plot Example\u00b6","text":""},{"location":"notebooks/visualization/#bar-chart-example","title":"Bar Chart Example\u00b6","text":""},{"location":"notebooks/visualization/#scatter-plot-example","title":"Scatter Plot Example\u00b6","text":""},{"location":"notebooks/visualization/#histogram-example","title":"Histogram Example\u00b6","text":""},{"location":"notebooks/visualization/#heatmap-example","title":"Heatmap Example\u00b6","text":""},{"location":"notebooks/visualization/#practice-exercises","title":"Practice Exercises\u00b6","text":"<ol> <li>Create a subplot with 4 different chart types</li> <li>Customize colors and styles</li> <li>Add annotations to highlight important points</li> </ol>"},{"location":"notebooks/visualization/#resources","title":"Resources\u00b6","text":"<ul> <li>Matplotlib Documentation</li> <li>Seaborn Gallery</li> </ul>"},{"location":"reference/api/","title":"API Reference","text":"<p>Complete API documentation for all modules and functions.</p>"},{"location":"reference/api/#core-modules","title":"Core Modules","text":""},{"location":"reference/api/#module-core","title":"Module: core","text":"<p>Main application core functionality.</p>"},{"location":"reference/api/#classes","title":"Classes","text":""},{"location":"reference/api/#application","title":"Application","text":"<p>Main application class.</p> <p>\\\\python class Application:     '''     Main application class for managing application lifecycle.</p> <pre><code>Args:\n    name (str): Application name\n    config (dict): Configuration dictionary\n'''\n\ndef __init__(self, name: str, config: dict = None):\n    pass\n\ndef start(self) -&gt; None:\n    '''Start the application.'''\n    pass\n\ndef stop(self) -&gt; None:\n    '''Stop the application gracefully.'''\n    pass\n</code></pre> <p>\\\\</p> <p>Parameters:</p> <ul> <li>\\ ame\\ (str): The name of the application</li> <li>\\config\\ (dict, optional): Configuration options</li> </ul> <p>Methods:</p> <ul> <li>\\start(): Starts the application</li> <li>\\stop(): Stops the application</li> <li>\\configure(**kwargs): Updates configuration</li> </ul> <p>Example:</p> <p>\\\\python app = Application(\"MyApp\", config={'debug': True}) app.start() \\\\</p>"},{"location":"reference/api/#module-data","title":"Module: data","text":"<p>Data processing utilities.</p>"},{"location":"reference/api/#functions","title":"Functions","text":""},{"location":"reference/api/#process_data","title":"process_data","text":"<p>\\\\python def process_data(data: list, transform: callable = None) -&gt; list:     '''     Process data with optional transformation.</p> <pre><code>Args:\n    data: Input data list\n    transform: Optional transformation function\n\nReturns:\n    Processed data list\n\nRaises:\n    ValueError: If data is invalid\n'''\n</code></pre> <p>\\\\</p> <p>Example:</p> <p>\\\\python from myproject.data import process_data</p> <p>result = process_data([1, 2, 3], transform=lambda x: x * 2)</p>"},{"location":"reference/api/#result-2-4-6","title":"Result: [2, 4, 6]","text":"<p>\\\\</p>"},{"location":"reference/api/#module-utils","title":"Module: utils","text":"<p>Utility functions and helpers.</p>"},{"location":"reference/api/#functions_1","title":"Functions","text":""},{"location":"reference/api/#validate_input","title":"validate_input","text":"<p>\\\\python def validate_input(value: any, schema: dict) -&gt; bool:     '''     Validate input against schema.</p> <pre><code>Args:\n    value: Value to validate\n    schema: Validation schema\n\nReturns:\n    True if valid, False otherwise\n'''\n</code></pre> <p>\\\\</p>"},{"location":"reference/api/#format_output","title":"format_output","text":"<p>\\\\python def format_output(data: dict, format: str = 'json') -&gt; str:     '''     Format output data.</p> <pre><code>Args:\n    data: Data to format\n    format: Output format ('json', 'xml', 'yaml')\n\nReturns:\n    Formatted string\n'''\n</code></pre> <p>\\\\</p>"},{"location":"reference/api/#configuration","title":"Configuration","text":""},{"location":"reference/api/#configuration-options","title":"Configuration Options","text":"Option Type Default Description debug bool False Enable debug mode log_level str 'INFO' Logging level timeout int 30 Operation timeout in seconds max_retries int 3 Maximum retry attempts"},{"location":"reference/api/#example-configuration","title":"Example Configuration","text":"<p>\\\\python config = {     'debug': True,     'log_level': 'DEBUG',     'timeout': 60,     'max_retries': 5 } \\\\</p>"},{"location":"reference/api/#error-handling","title":"Error Handling","text":""},{"location":"reference/api/#exceptions","title":"Exceptions","text":""},{"location":"reference/api/#applicationerror","title":"ApplicationError","text":"<p>Base exception for application errors.</p> <p>\\\\python class ApplicationError(Exception):     '''Base exception for application errors.'''     pass \\\\</p>"},{"location":"reference/api/#configurationerror","title":"ConfigurationError","text":"<p>Raised when configuration is invalid.</p> <p>\\\\python class ConfigurationError(ApplicationError):     '''Raised when configuration is invalid.'''     pass \\\\</p>"},{"location":"reference/api/#type-hints","title":"Type Hints","text":"<p>The library uses type hints throughout:</p> <p>\\\\python from typing import List, Dict, Optional</p> <p>def process(     data: List[Dict[str, any]],      options: Optional[Dict[str, any]] = None ) -&gt; List[Dict[str, any]]:     pass \\\\</p>"},{"location":"reference/api/#additional-resources","title":"Additional Resources","text":"<ul> <li>User Guide</li> <li>Tutorials</li> <li>GitHub Repository</li> </ul>"},{"location":"tutorials/tutorial-1/","title":"Tutorial 1: Building Your First Application","text":""},{"location":"tutorials/tutorial-1/#overview","title":"Overview","text":"<p>In this tutorial, you'll learn how to build a complete application from scratch.</p> <p>Duration: 30 minutes Difficulty: Beginner</p>"},{"location":"tutorials/tutorial-1/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic Python knowledge</li> <li>Completed Installation</li> </ul>"},{"location":"tutorials/tutorial-1/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this tutorial, you will:</p> <ul> <li>\u2705 Understand the project structure</li> <li>\u2705 Create a basic application</li> <li>\u2705 Implement core functionality</li> <li>\u2705 Test your application</li> </ul>"},{"location":"tutorials/tutorial-1/#step-1-project-setup","title":"Step 1: Project Setup","text":"<p>Create a new project directory:</p> <p>\\\\\bash mkdir my-first-app cd my-first-app \\\\</p>"},{"location":"tutorials/tutorial-1/#step-2-create-main-file","title":"Step 2: Create Main File","text":"<p>Create \\main.py:</p> <p>\\\\python</p>"},{"location":"tutorials/tutorial-1/#mainpy","title":"main.py","text":"<p>def main():     print(\"Hello, World!\")</p> <p>if name == \"main\":     main() \\\\</p>"},{"location":"tutorials/tutorial-1/#step-3-add-functionality","title":"Step 3: Add Functionality","text":"<p>Extend the application:</p> <p>\\\\python</p>"},{"location":"tutorials/tutorial-1/#mainpy_1","title":"main.py","text":"<p>class Application:     def init(self, name):         self.name = name</p> <pre><code>def run(self):\n    print(f\"Running {self.name}...\")\n    self.process()\n\ndef process(self):\n    # Core logic here\n    pass\n</code></pre> <p>def main():     app = Application(\"My First App\")     app.run()</p> <p>if name == \"main\":     main() \\\\</p>"},{"location":"tutorials/tutorial-1/#step-4-testing","title":"Step 4: Testing","text":"<p>Test your application:</p> <p>\\\\\bash python main.py \\\\</p>"},{"location":"tutorials/tutorial-1/#expected-output","title":"Expected Output","text":"<p>\\\\ Running My First App... \\\\</p>"},{"location":"tutorials/tutorial-1/#next-steps","title":"Next Steps","text":"<p>Completed!</p> <p>Congratulations! You've built your first application.</p> <p>Continue to Tutorial 2 to learn more advanced concepts.</p>"},{"location":"tutorials/tutorial-1/#exercises","title":"Exercises","text":"<p>Try these challenges:</p> <ol> <li>Add command-line arguments</li> <li>Implement error handling</li> <li>Add logging functionality</li> </ol>"},{"location":"tutorials/tutorial-2/","title":"Tutorial 2: Working with Data","text":""},{"location":"tutorials/tutorial-2/#overview","title":"Overview","text":"<p>Learn how to work with data effectively in your applications.</p> <p>Duration: 45 minutes Difficulty: Intermediate</p>"},{"location":"tutorials/tutorial-2/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 1</li> <li>Understanding of Python data structures</li> </ul>"},{"location":"tutorials/tutorial-2/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>\ud83d\udcca Read and write data files</li> <li>\ud83d\udd04 Transform data</li> <li>\ud83d\udcc8 Visualize results</li> <li>\ud83d\udcbe Store data persistently</li> </ul>"},{"location":"tutorials/tutorial-2/#step-1-reading-data","title":"Step 1: Reading Data","text":""},{"location":"tutorials/tutorial-2/#csv-files","title":"CSV Files","text":"<p>\\\\python import csv</p> <p>def read_csv(filename):     with open(filename, 'r') as file:         reader = csv.DictReader(file)         return list(reader)</p> <p>data = read_csv('data.csv') \\\\</p>"},{"location":"tutorials/tutorial-2/#json-files","title":"JSON Files","text":"<p>\\\\python import json</p> <p>def read_json(filename):     with open(filename, 'r') as file:         return json.load(file)</p> <p>data = read_json('data.json') \\\\</p>"},{"location":"tutorials/tutorial-2/#step-2-data-transformation","title":"Step 2: Data Transformation","text":"<p>Process and transform data:</p> <p>\\\\python def transform_data(data):     return [         {             'id': item['id'],             'value': float(item['value']) * 2         }         for item in data     ]</p> <p>transformed = transform_data(data) \\\\</p>"},{"location":"tutorials/tutorial-2/#step-3-data-analysis","title":"Step 3: Data Analysis","text":"<p>Perform basic analysis:</p> <p>\\\\python def analyze_data(data):     values = [item['value'] for item in data]     return {         'count': len(values),         'sum': sum(values),         'average': sum(values) / len(values),         'min': min(values),         'max': max(values)     }</p> <p>stats = analyze_data(data) print(stats) \\\\</p>"},{"location":"tutorials/tutorial-2/#step-4-visualization","title":"Step 4: Visualization","text":"<p>Create simple visualizations:</p> <p>\\\\python import matplotlib.pyplot as plt</p> <p>def plot_data(data):     values = [item['value'] for item in data]     plt.plot(values)     plt.title('Data Visualization')     plt.xlabel('Index')     plt.ylabel('Value')     plt.show()</p> <p>plot_data(data) \\\\</p>"},{"location":"tutorials/tutorial-2/#step-5-saving-results","title":"Step 5: Saving Results","text":"<p>Save processed data:</p> <p>\\\\python def save_results(data, filename):     with open(filename, 'w') as file:         json.dump(data, file, indent=2)</p> <p>save_results(transformed, 'results.json') \\\\</p>"},{"location":"tutorials/tutorial-2/#complete-example","title":"Complete Example","text":"<p>Here's a complete working example:</p> <p>\\\\python import csv import json</p> <p>class DataProcessor:     def init(self, input_file):         self.input_file = input_file         self.data = None</p> <pre><code>def load(self):\n    with open(self.input_file, 'r') as file:\n        self.data = json.load(file)\n\ndef process(self):\n    return [item['value'] * 2 for item in self.data]\n\ndef save(self, output_file):\n    with open(output_file, 'w') as file:\n        json.dump(self.data, file)\n</code></pre>"},{"location":"tutorials/tutorial-2/#usage","title":"Usage","text":"<p>processor = DataProcessor('input.json') processor.load() results = processor.process() processor.save('output.json') \\\\</p>"},{"location":"tutorials/tutorial-2/#practice-exercises","title":"Practice Exercises","text":"<ol> <li>Load a CSV file with sales data</li> <li>Calculate monthly averages</li> <li>Create a bar chart of results</li> <li>Export to JSON format</li> </ol> <p>Bonus Challenge</p> <p>Implement error handling for missing files and invalid data.</p>"},{"location":"tutorials/tutorial-2/#summary","title":"Summary","text":"<p>You've learned:</p> <ul> <li>\u2705 File I/O operations</li> <li>\u2705 Data transformation techniques</li> <li>\u2705 Basic data analysis</li> <li>\u2705 Visualization basics</li> </ul> <p>Continue to the Notebooks section for interactive examples!</p>"}]}